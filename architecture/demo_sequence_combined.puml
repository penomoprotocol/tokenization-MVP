@startuml
title Battery Business Flow

actor BatteryBusiness as BB
actor RetailInvestor as RI

participant BBWallet as BBW
participant InvestorWallet as IW

participant BBPortal as BBP
participant InvestorPortal as IP

participant API as API

participant Database as DB
participant IPFS as IPFS
participant PeaqSDK as PS

participant ServiceContract as SC
participant TokenContract as TC
participant LiquidityContract as LC
participant RevenueContract as RC
participant RevenueReceiverContract as RRC

participant BatterySimulator as BS

' Battery Business Registration and Login
group BB Registration and Login
    BB -> BBP: Register on bb-portal
    BBP -[#red]> API: POST /register
    API -> DB: CreateProfile("company", data)
    BB -> BBP: Login on bb-portal
    BBP -[#red]> API: POST /login
end

' Battery Tokenization
group Battery Tokenization
    BB -> BBP: RegisterBattery(bid, data)
    BBP -> PS: CreateDID(bid)
    PS -> BBP: Return DID
    BBP -> IPFS: SaveBatteryData(DID, data)
    IPFS -> BBP: Return CID
    BBP -[#red]> API: POST /tokenizeBattery
    API -> SC: TokenizeBattery(CID, DID, data)
    SC -> TC: DeployTokenContract(CID, DID, data)
    SC -> LC: DeployLiquidityContract()
    SC -> RC: DeployRevenueContract()
end

' Retail Investor Registration and Token Purchase
group Retail Investor Interaction
    RI -> IP: Register on investor portal
    IP -[#red]> API: POST /register
    API -> DB: CreateProfile("investor", data)
    RI -> IP: Login in investor portal
    IP -[#red]> API: POST /login
    RI -> IP: BuyTokens(amount)
    IP -[#red]> API: POST /buyTokens
    API -> IW: SignTransaction(amount)
    IW -> SC: Approve(amount)
    SC -> TC: TransferTokens(RI, amount)
    SC -> LC: TransferFunds(amount)
end

' Revenue Simulation and Distribution
group Revenue Simulation and Distribution
    RRC -> RRC: startRental()
    BS -> RRC: Every second: Send kWh reading
    RRC -> RRC: stopRental() -> Calculate totalAmount
    RRC -> SC: transfer(totalAmount)
    SC -> RC: transfer(totalAmount-penomoFee)
    RC -> RC:  DistributeRevenueShares()
    RC -> TC: RetrieveTokenHoldersShares()
    TC -> RC: Return(holders, fractions)
    loop for each holder in holders[]
        RC -> RC: CalculateRevenueShare(fractions[i])
        RC -[#green]> IW: TransferRevenueShare(holders[i])
    end
end

@enduml
